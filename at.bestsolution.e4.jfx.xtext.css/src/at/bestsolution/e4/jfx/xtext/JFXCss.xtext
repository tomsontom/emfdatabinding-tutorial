grammar at.bestsolution.e4.jfx.xtext.JFXCss with org.eclipse.xtext.common.Terminals

generate jFXCss "http://www.bestsolution.at/e4/jfx/xtext/JFXCss"

JFXCss:
	definitions+=Definition+
;

Definition:
	( '#' id=ID ) 
	// (':' ('disabled'|'focused'|'hover'|'pressed'|'strong'|'armed'|'empty'|'filled'|'defined'|'selected'|'undefined'|'showing'|'visited'|'even'|'odd'|'selected'|'horizontal'|'vertical'|'determinate'|'indetermindate'|'pannable'|'multiline'|'editable'|'readonly'|'selected'|'showing') )? 
		'{'
		properties+=FXProperty+
	'}'
;

FXProperty:
	(
		// Font
		FontProperty |
		FontFamilyProperty |
		FontSizeProperty |
		FontStyleProperty |
		FontWeightProperty |
		CursorProperty |
		EffectProperty |
		BooleanProperty |
		SizeProperty |
		NumberProperty |
		IntegerProperty |
		PaintProperty |
		BlendProperty |
		UrlProperty |
		PaintProperties |
		MultiSizeProperties |
		HPositionProperty |
		VPositionProperty |
		SideProperty |
		BarPolicyProperty |
		UrlProperties |
		RepeatProperties |
		MultiSizeProperty |
		SizeProperties |
		StrokeLineCapProperty |
		StrokeLineJoinProperty |
		TextAlignmentProperty |
		TextOriginProperty |
		BackgroundImagePositionProperty |
		BackgroundImageSizeProperty |
		BorderStyleProperty |
		BorderImageSliceProperty |
		ShapeProperty |
		TextProperty |
		TextOverrunProperty |
		EchoCharProperty |
		InsetsProperty |
		HorizontalGridLineStrokeDashArrayProperty |
		VerticalGridLineStrokeDashArrayProperty |
		BorderColorProperty
	) ';'
;

FontProperty:
	property=(
		'-fx-font' | '-fx-title-font' | '-fx-pie-label-font' | '-fx-pie-value-label-font' 
		| '-fx-label-font' | '-fx-tick-label-font'
	) ':' value=FontValue
;

FontFamilyProperty:
	property=(
		'-fx-font-family' | '-fx-title-font-family' | '-fx-pie-label-font-family' | '-fx-pie-value-label-font-family' 
		| '-fx-label-font-family' | '-fx-tick-label-font-family'
	) ':' value=FontFamily
;

FontSizeProperty:
	property=(
		'-fx-font-size' | '-fx-title-font-size' | '-fx-pie-label-font-size' | '-fx-pie-value-label-font-size' 
		| '-fx-label-font-size' | '-fx-tick-label-font-size'
		) ':' value=SizeValue
;

FontStyleProperty:
	property=(
		'-fx-font-style' | '-fx-title-font-style' | '-fx-pie-label-font-style' | '-fx-pie-value-label-font-style' 
		| '-fx-label-font-style' | '-fx-tick-label-font-style'
	) ':' value=FontStyleValue
;

FontWeightProperty:
	property=(
		'-fx-font-weight' | '-fx-title-font-weight' | '-fx-pie-label-font-weight' | '-fx-pie-value-label-font-weight' 
		| '-fx-label-font-weight' | '-fx-tick-label-font-weight'
	) ':' value=FontWeightValue
;

CursorProperty:
	'-fx-cursor' ':' value=( 'crosshair' | 'default' | 'hand' | 'move' | 'e-resize' | 'h-resize' | 'ne-resize' | 'nw-resize' | 'n-resize' | 'se-resize' | 'sw-resize' | 's-resize' | 'w-resize' | 'v-resize' | 'text' | 'wait' )
;

EffectProperty:
	'-fx-effect' ':' value=Effect
;

Effect:
	EffectDropShadow | EffectInnerShadow
;

EffectDropShadow:
	'dropshadow' '(' blur=BlurValue ',' color=ColorValue ',' blurRadius=NumberValue ',' spread=NumberValue ',' offsetX=NumberValue ',' offsetY=NumberValue ')'
;


EffectInnerShadow:
	'innershadow(' blur=BlurValue ',' color=ColorValue ',' blurRadius=NumberValue ',' choke=NumberValue ',' offsetX=NumberValue ',' offsetY=NumberValue ')'
;

BooleanProperty:
	property=( 
		'-fx-focus-traversable' | '-fx-pannable' | '-fx-hgap' | '-fx-vpos' | '-fx-snap-to-pixel' | '-fx-vertical' | '-fx-smooth' | '-fx-strikethrough' | '-fx-underline' | '-fx-scale-shape' | '-fx-vertical-zero-line-visible' | '-fx-vertical-grid-line-visible' | '-fx-horizontal-zero-line-visible'
		| '-fx-horizontal-grid-line-visible' | '-fx-pie-value-visible' | '-fx-pie-to-label-line-curved' | '-fx-pie-label-visible' | '-fx-clockwise'
		| '-fx-show-symbols' | '-fx-legend-visible' | '-fx-scale-bubble-radius-using-axis' | '-fx-select-on-focus' | '-fx-editable'
		| '-fx-snap-to-ticks' | '-fx-show-tick-marks' | '-fx-show-tick-labels' | '-fx-fit-to-width' | '-fx-minor-tick-visible'
		| '-fx-gap-start-and-end' | '-fx-tick-mark-visible' | '-fx-tick-labels-visible' | '-fx-fit-to-height'
		| '-fx-click-to-position' | '-fx-text-wrap' | '-fx-position-shape'
	) ':' value=BooleanValue
;

SizeProperty:
	property=(
		'-fx-spacing' | '-fx-arc-height' | '-fx-arc-width' | '-fx-minor-tick-length'
		| '-fx-stroke-width' | '-fx-start-margin' | '-fx-end-margin' | '-fx-tick-mark-stroke-width'
		| '-fx-tick-mark-length' | '-fx-tick-label-tick-gap' | '-fx-axis-stroke-width' | '-fx-label-tick-gap'
		| '-fx-vertical-grid-line-stroke-width' | '-fx-plot-background-stroke-width' | '-fx-horizontal-grid-line-stroke-width'
		| '-fx-pie-thickness' | '-fx-pie-stroke-width' | '-fx-title-gap' | '-fx-legend-gap' | '-fx-hover-stroke-width'
		| '-fx-chart-background-stroke-width' | '-fx-offset-y' | '-fx-offset-x' | '-fx-category-gap'
		| '-fx-bar-gap' | '-fx-graphic-text-gap'
		) ':' value=SizeValue
;

NumberProperty:
	property=(
		'-fx-rotate' | '-fx-scale-x' | '-fx-scale-y' | '-fx-scale-z' | '-fx-translate-x'
		| '-fx-translate-y' | '-fx-translate-z' | '-fx-vgap' | '-fx-tile-height' | '-fx-tile-width'
		| '-fx-stroke-dash-offset' | '-fx-stroke-miter-limit' | '-fx-block-increment'
		| '-fx-unit-increment' | '-fx-major-tick-unit' | '-fx-data-opacity'
		| '-fx-radius-scale' | '-fx-pie-to-label-line-one-length' | '-fx-pie-to-label-line-stroke-width'
		| '-fx-pie-to-label-line-two-length' | '-fx-start-angle' | '-fx-tick-unit'
	) ':' value=NumberValue
;

IntegerProperty:
	property=(
		'-fx-columns' | '-fx-rows' | '-fx-lines' | '-fx-minor-tick-count'
	) ':' value=IntegerValue
;

PaintProperty:
	property=(
		'-fx-fill' | '-fx-stroke' | '-fx-text-fill' | '-fx-bar-fill' | '-fx-bar-stroke' | '-fx-bottom-shelf-fill'
		| '-fx-bottom-shelf-stroke' | '-fx-side-shelf-fill' | '-fx-side-shelf-stroke' | '-fx-zero-shelf-fill'
		| '-fx-zero-shelf-stroke' | '-fx-chart-background-fill' | '-fx-chart-background-stroke'
		| '-fx-hover-stroke' | '-fx-title-fill' | '-fx-pie-label-fill' | '-fx-pie-stroke'
		| '-fx-pie-to-label-line-stroke' | '-fx-pie-value-label-fill' | '-fx-horizontal-alternate-row-fill'
		| '-fx-plot-background-fill' | '-fx-horizontal-grid-line-stroke' | '-fx-plot-background-stroke'
		| '-fx-vertical-alternate-row-fill' | '-fx-vertical-grid-line-stroke' | '-fx-axis-stroke'
		| '-fx-tick-label-fill' | '-fx-label-fill' | '-fx-tick-mark-stroke' | '-fx-hover-fill'
		
	) ':' value=PaintValue
;

PaintProperties:
	property=(
		'-fx-background-color'
	) ':' (values+=PaintValue) (',' values+=PaintValue)*
;

BlendProperty:
	'-fx-blend-mode' ':' value=( 'add' | 'blue' | 'color-burn' | 'color-dodge' | 'darken' | 'difference' | 'exclusion' | 'green' | 'hard-light' | 'lighten' | 'multiply' | 'overlay' | 'red' | 'screen' | 'soft-light' | 'src-atop' | 'src-in' | 'src-out' | 'src-over' )
;

UrlProperty:
	property=(
		'-fx-image' | '-fx-graphic'
	) ':' value=UrlValue
;

MultiSizeProperties:
	property=(
		'-fx-background-insets' | '-fx-background-radius' | '-fx-border-insets' | '-fx-border-radius'
		| '-fx-border-width' | '-fx-border-image-insets' | '-fx-border-image-width'
	) ':' values+=MultiSizeValue ( ',' values+=MultiSizeValue )*
;

HPositionProperty:
	property=(
		'-fx-hpos' | '-fx-node-hpos' | '-fx-graphic-hpos'
	) ':' value=HPositionValue
;

VPositionProperty:
	property=(
		'-fx-vpos' | '-fx-node-vpos' | '-fx-graphic-vpos'
	) ':' value=VPositionValue
;

SideProperty:
	property=(
		'-fx-legend-side' | '-fx-title-side' | '-fx-side'
	) ':' value=( 'top' | 'bottom' | 'left' | 'right' )
;

BarPolicyProperty:
	property=(
		'-fx-hbar-policy' | '-fx-vbar-policy'
	) ':' value=( 'never' | 'always' | 'as_needed' )
;

UrlProperties:
	property=(
		'-fx-background-image' | '-fx-border-image'
	) ':' values+=UrlValue ( ',' values+=UrlValue )*
;

RepeatProperties:
	property=(
		'-fx-background-image-repeat' | '-fx-border-image-repeat'
	) ':' values+=RepeatStyleValue (',' values+=RepeatStyleValue)*
;

MultiSizeProperty:
	property=(
		'-fx-padding'
	) ':' value=MultiSizeValue
;

SizeProperties:
	property=(
		'-fx-stroke-dash-array'
	) ':' values+=SizeValue+
;

StrokeLineCapProperty:
	'-fx-stroke-line-cap' ':' value=('square' | 'butt' | 'round')
;

StrokeLineJoinProperty:
	'-fx-stroke-line-join' ':' value=( 'miter' | 'bevel' | 'round' )
;

TextAlignmentProperty:
	'-fx-text-alignment' ':' value=('left' | 'center' | 'right' | 'justify')
;

TextOriginProperty:
	'-fx-text-origin' ':' value=('baseline' | 'top' | 'bottom')
;

BackgroundImagePositionProperty:
	'-fx-background-image-position' ':' values+=BgPositionValue (',' values+=BgPositionValue)*
;

BackgroundImageSizeProperty:
	'-fx-background-image-size' ':' values+=BgSizeValue (',' values+=BgSizeValue)*
;

BorderColorProperty:
	'-fx-border-color' ':' values+=MultiPaintValue (',' values+=MultiPaintValue)*
;

BorderStyleProperty:
	'-fx-border-style' ':' values+=BorderStyleValue (',' values+=BorderStyleValue)*
;

BorderImageSliceProperty:
	'-fx-border-image-slice' ':' values+=SizeFill (',' values+=SizeFill)*
;

ShapeProperty:
	'-fx-shape' ':' value=STRING
;

TextProperty:
	'-fx-text' ':' value=STRING
;

TextOverrunProperty:
	'-fx-text-overrun' ':' value=( 'center-ellipses' | 'center-word-ellipses' | 'clip' | 'ellipses' | 'leading-ellipses' | 'leading-word-ellipses' | 'word-ellipses' )
;

EchoCharProperty:
	'-fx-echo-char' ':' value=ID
;

InsetsProperty:
	'-fx-insets' ':' value+=NumberValue | ( value+=NumberValue value+=NumberValue value+=NumberValue value+=NumberValue )
;

HorizontalGridLineStrokeDashArrayProperty:
	'-fx-horizontal-grid-line-stroke-dash-array' ':' value+=NumberValue+
;

VerticalGridLineStrokeDashArrayProperty:
	'-fx-vertical-grid-line-stroke-dash-array' ':' values+=NumberValue values+=NumberValue+
;


//
// ---------------
// Values
// ---------------
enum BooleanValue:
	true | false
;

enum HPositionValue:
	left | center | right | leading | trailing
;

VPositionValue:
	v = ('top' | 'center' | 'baseline' | 'bottom' | 'page-end' | 'page-start')
;

BlurValue:
	v = ('gaussian' | 'one-pass-box' | 'three-pass-box' | 'two-pass-box')
;

NumberValue:
	IntegerValue //| RealValue
;

IntegerValue:
	value=INT
;

//RealValue:
//	value=INT
//;

UrlValue:
	'url(' address=AddressValue  ')'
;

AddressValue:
	value = STRING
;

SizeValue:
	value=NumberValue (dimension=('%'|'px'|'mm'|'cm'|'in'|'pt'|'pc'|'em'|'ex'))?
;

MultiSizeValue:
	( values+=SizeValue | values+=SizeValue values+=SizeValue values+=SizeValue values+=SizeValue )
;

BgPositionValue:
	(
		( absx=SizeValue | relx=('left' | 'center' | 'right') ) ( absy=SizeValue | rely=('top' | 'center' | 'bottom') )
	)
//	|
//	(
//		( center | ( left | right ) SizeValue? ) | ( center | ( top | bottom ) SizeValue? )
//	)
;

RepeatStyleValue:
	v = ('repeat-x' | 'repeat-y') | (  v=('repeat' | 'space' | 'round' | 'no-repeat') v2=('repeat' | 'space' | 'round' | 'no-repeat')?)
;

BgSizeValue:
	( ( xsize=SizeValue | xauto='auto' ) ( ysize=SizeValue | yauto='auto' )? ) | predefined=('cover' | 'contain')
;

MultiPaintValue:
	values+=PaintValue+ 
	// values+=PaintValue values+=PaintValue values+=PaintValue values+=PaintValue
	// values+=PaintValue // | (values+=PaintValue values+=PaintValue values+=PaintValue values+=PaintValue)
	// (values+=PaintValue | values+=PaintValue values+=PaintValue values+=PaintValue values+=PaintValue)
;

BorderStyleValue:
	dashStyle=DashStyleValue location=('centered' | 'inside' | 'outside')? ('line-join' ('miter' miterAbs=NumberValue | miterPredefined=('bevel' | 'round') ))? ('line-cap' lineCap=('square' | 'butt' | 'round'))?
;

DashStyleValue:
 v = ('none' | 'solid' | 'dotted' | 'dashed')	
;

SizeFill:
	value=MultiSizeValue fill='fill'?
;

FontValue:
	( styleOrWeightString=('italic' | 'oblique' | 'normal' | 'bold' | 'bolder' | 'lighter') | weight=IntegerProperty )? size=SizeValue family=FontFamily
;

FontStyleValue:
	value=('normal' | 'italic' | 'oblique')
;

FontWeightValue:
	valueString=('normal' | 'bold' | 'bolder' | 'lighter') | valueInt=NumberValue 
;

FontFamily:
	value=ID
;

PaintValue:
	LinearGradient | RadialGradient | ColorValue
;


LinearGradient:
	'linear' '(' x1=SizeValue ',' y1=SizeValue ')' 'to' '(' x2=SizeValue ',' y2=SizeValue ')' 'stops' ( '(' stops+=StopValue ')' )+ ( 'repeat' | 'reflect' )?
;

RadialGradient:
	'radial' ('(' cx=SizeValue ',' cy=SizeValue ')' ',' )? radius=SizeValue ( 'focus' '(' fx=SizeValue ',' fy=SizeValue ')' ) 'stops' ( '(' stops+=StopValue ')' )+ ( 'repeat' | 'reflect' )?
;

StopValue:
	pos=SizeValue ',' color=ColorValue
;

ColorValue:
	NamedColor |
	RGBColor |
	HSBColor |
	ColorFunction
;

NamedColor:
	value = (
		'aliceblue'      | 'antiquewhite'     | 'aqua'                | 'aquamarine'      | 
		'azure'          | 'beige'            | 'bisque'              | 'black'           | 
		'blanchedalmond' | 'blue'             | 'blueviolet'          | 'brown'           | 
		'burlywood'      | 'cadetblue'        | 'chartreuse'          | 'chocolate'       | 
		'coral'          | 'cornflowerblue'   | 'cornsilk'            | 'crimson'         | 
		'cyan'           | 'darkblue'         | 'darkcyan'            | 'darkgoldenrod'   | 
		'darkgray'       | 'darkgreen'        | 'darkgrey'            | 'darkkhaki'       | 
		'darkmagenta'    | 'darkolivegreen'   | 'darkorange'          | 'darkorchid'      | 
		'darkred'        | 'darksalmon'       | 'darkseagreen'        | 'darkslateblue'   | 
		'darkslategray'  | 'darkslategrey'    | 'darkturquoise'       | 'darkviolet'      | 
		'deeppink'       | 'deepskyblue'      | 'dimgray'             | 'dimgrey'         | 
		'dodgerblue'     | 'firebrick'        | 'floralwhite'         | 'forestgreen'     | 
		'fuchsia'        | 'gainsboro'        | 'ghostwhite'          | 'gold'            | 
		'goldenrod'      | 'gray'             | 'green'               | 'greenyellow'     | 
		'grey'           | 'honeydew'         | 'hotpink'             | 'indianred'       | 
		'indigo'         | 'ivory'            | 'khaki'               | 'lavender'        | 
		'lavenderblush'  | 'lawngreen'        | 'lemonchiffon'        | 'lightblue'       | 
		'lightcoral'     | 'lightcyan'        | 'lightgoldenrodyellow'| 'lightgray'       | 
		'lightgreen'     | 'lightgrey'        | 'lightpink'           | 'lightsalmon'     | 
		'lightseagreen'  | 'lightskyblue'     | 'lightslategray'      | 'lightslategrey'  | 
		'lightsteelblue' | 'lightyellow'      | 'lime'                | 'limegreen'       | 
		'linen'          | 'magenta'          | 'maroon'              | 'mediumaquamarine'| 
		'mediumblue'     | 'mediumorchid'     | 'mediumpurple'        | 'mediumseagreen'  | 
		'mediumslateblue'| 'mediumspringgreen'| 'mediumturquoise'     | 'mediumvioletred' | 
		'midnightblue'   | 'mintcream'        | 'mistyrose'           | 'moccasin'        | 
		'navajowhite'    | 'navy'             | 'oldlace'             | 'olive'           | 
		'olivedrab'      | 'orange'           | 'orangered'           | 'orchid'          | 
		'palegoldenrod'  | 'palegreen'        | 'paleturquoise'       | 'palevioletred'   | 
		'papayawhip'     | 'peachpuff'        | 'peru'                | 'pink'            | 
		'plum'           | 'powderblue'       | 'purple'              | 'red'             | 
		'rosybrown'      | 'royalblue'        | 'saddlebrown'         | 'salmon'          | 
		'sandybrown'     | 'seagreen'         | 'seashell'            | 'sienna'          | 
		'silver'         | 'skyblue'          | 'slateblue'           | 'slategray'       | 
		'slategrey'      | 'snow'             | 'springgreen'         | 'steelblue'       | 
		'tan'            | 'teal'             | 'thistle'             | 'tomato'          | 
		'turquoise'      | 'violet'           | 'wheat'               | 'white'           | 
		'whitesmoke'     | 'yellow'           | 'yellowgreen'         | 'transparent'     
	)
;

RGBColor:
	('#' hex=HexDigit)
	|
	('rgb' '(' r=IntegerValue ',' g=IntegerValue ',' b=IntegerValue ')' )
	|
	('rgb' '(' rp=IntegerValue '%' ',' gp=IntegerValue '%' ',' bp=IntegerValue '%' ')' )
	|
	('rgba' '(' r=IntegerValue ',' g=IntegerValue ',' b=IntegerValue ',' alpha=NumberValue ')' )
	|
	('rgba' '(' rp=IntegerValue '%' ',' gp=IntegerValue '%' ',' bp=IntegerValue '%' ',' alpha=NumberValue ')' )
;

HSBColor:
	('hsb' '(' hue=NumberValue ',' saturation=NumberValue '%' ',' brightness=NumberValue '%' ')')
	|
	('hsba' '(' hue=NumberValue ',' saturation=NumberValue '%' ',' brightness=NumberValue '%' ',' alpha=NumberValue ')')
;

ColorFunction:
	( 'derive' '(' orig=ColorValue ',' mod=NumberValue '%' ')' )
	|
	( 'ladder' '(' orig=ColorValue ')' 'stops' ( '(' stopNumbers+=NumberValue ',' stopColors+=ColorValue  ')' )+ )
;

HexDigit hidden(): ID|INT ID|INT;